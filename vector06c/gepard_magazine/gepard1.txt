 
                Сервисный Центр "Gepard"





          Ж У Р Н А Л   П О Л Ь З О В А Т Е Л Я










                    " G E P A R D "


                       1-й номер

                      сентябрь-94























                         О М С К




        Что такое Сервисный Центр "Gepard"

        Наш СЦ образовался усилиями нескольких энтузиас-
тов,  очень неравнодушных к компьютерам вообще и к "Век-
тору" в частности.  Начали мы работать  "на  публику"  3
года назад,  еще не имея ни дисководов,  ни квазидисков,
даже без принтера.  Собственно,  кроме компьютеров у нас
была только масса жаждущих (да и  она  появилась  уже  в
ходе работы)  иметь  новые  программы  и  получать  хоть
какую-то информацию о своих машинках.
        Надо сказать,   работать  на  "Вектор"  дело  не
оченьто прибыльное. Возможно, конечно, и из-за того, что
Омск находится довольно далеко от районов,  где "Вектор"
распространен наиболее широко. Тем не менее мы "уперлись
рогом" именно в этот компьютер и спустя  три  года  нис-
колько об этом не жалеем. А в какой еще упираться? Среди
отечественных бытовых ПЭВМ он,  пожалуй,  лучший.  С ним
могут спорить:
        - БК ? По массовости и по обилию программ. Но по
техническим характеристикам он явно хуже,  да  и  прошло
его время.
        - Spectrum ? Большинство из них просто игрушки и
лучше "Вектора" не они,  и даже не их программы,  а лишь
то, что этих программ море. Работать же на них абсолютно
невозможно. Есть, конечно, другие - ATM-TURBO,  PROFI  и
т.п. Да, это серьезные машины. Но они, скорее,  не быто-
вые, а "прикладные". Убивает как раз то, что для них уже
есть все программы и почти все  внешние  устройства.   С
ними невозможно экспериментировать, они не предназначены
для "домашнего творчества",  а это ведь чуть ли не самый
важный признак ДОМАШНЕЙ ПЭВМ. И, наконец, игры SPECTRUM-
овские  какие-то (трудно подобрать  точное  определение)
"не наши".  И дело вовсе не в нашей "совковости" и  т.п.
Дело в том, что эти игры какие-то все на одно лицо,  как
видеофильмы.  Все боевики да триллеры.  Надоедает быстро
(конечно, кому как).
        - ПОИСК ? Но он занял какую-то странную позицию,
напоминающую известный предмет в проруби. С одной сторо-
ны, это явно непрофессиональная машина. С другой стороны,
бытовой  ее  не  назовешь  (хотя бы из-за стоимости).  С
одной стороны,  это вроде IBM-совместимый ПК.  С  другой
стороны,  бесит именно эта "почти полная"  совместимость
со всевозможными "но",  ...но процессор не  тот,   ...но
быстродействие совсем не то,   ...но  куча  программ  не
идет,  ...но без дисковода он - ничто  (что  же  это  за
бытовая ПЭВМ?) и т.д. и т.п.
        - КОРВЕТ ?  Классная машина.  Но абсолютно учеб-
ная. В продаже не бывает никогда.  Следовательно,  никто
тебе ничем не поможет - решай все проблемы сам.
        Вот и все, что можно назвать бытовой ПЭВМ.
        Да, и "Вектор" не идеальная машина. Но стремится
ею стать (как в свое время БК)  и становится.   В  конце
концов,  дело,  наверное,  не  в  быстродействии  (самая
большая беда процессора КР580),  а в чем-то другом,  что
трудно обозвать техническим термином.  SPECTRUM  сплотил
вокруг себя подростков с "пекалями" и "кенжиками", ПОИСК
- юных интеллектуалов.  Остается  огромный  круг  людей,
неравнодушных к компьютерам и жаждущих от них не  управ-
ляемых "видиков" и не  стремящихся  к  профессиональному
владению компьютером.  А чего  жаждущих?   Да  просто  -
заполнить досуг интересным  и  полезным  делом.   Где-то
поиграть (но не всегда в пиф-паф!),  где-то  поработать,
отдохнуть,   чего-нибудь  выдумать  новое  и  паяльником
помахать.  Чему-нибудь поучиться и  детей  поучить.   Не
рыдать, если чего-то сломается (стоимость!) и постепе-е-
е-нно вместе  со  своим  ростом  наращивать  мощь  своей
машины, желательно "почти безгранично".  Вот всему этому
почти идеально отвечает "Вектор".
        Вы, поди, уже думаете:  "Чего это вдруг начали о
себе рассказывать и черт-те  куда  заехали  ребята?"  Да
нет, мы говорим о своем отношении к "Вектору",  а,  зна-
чит,  о себе.  Другими словами,  мы уважаем  "Вектор"  и
стараемся сделать из него идеальный домашний  компьютер.
Из этого вытекают следующие наши "особенные" черты:
        - в наших каталогах,  пожалуй,  меньше программ,
чем у некоторых центров и частников-тиражаторов. Но!  Но
среди программ,   тиражируемых  нами,   практически  нет
халтурных, низкопробных, неработающих вещей. Мы отсеива-
ем не менее ПОЛОВИНЫ новых поступлений.  Так что  можете
не опасаться, заказывая у нас программы.
        - мы не ставим никаких защит ни на свои.  ни  на
чужие программы.  Есть даже такой грех -  снимаем  их  с
некоторых программ.  Из двух зол  мы  выбираем  меньшее.
Конечно, на НАШ взгляд меньшее. Первое "зло" - пиратство
и хакерство.  Да,  это проблема,  и ее надо решать.   Но
увешивать программы защитами - это не решение  проблемы.
Второе "зло"  -  слабое  распространение  программ.   На
"Вектор" и так программ мало,  а если еще  каждую  защи-
щать...  В конце концов,  игрушка - это не бухпакет,  не
система программирования и пр.   И  делают  игрушки,   в
основном, не фирмы, а отдельные частные лица. И повесить
на хорошую игрушку амбарный замок - самому не пускать  к
себе популярность.   Защитить  свои  программы  и  своих
программистов может только ФИРМА, причем фирма серьезная
(ну не MicroSoft,  но хоть в 100 раз меньшая,  но  не  в
1000!). А до этого говорить о борьбе с пиратством просто
несерьезно.  Вот запустили почти идеальный способ (то ли
в Кирове,  то ли в Волгограде первыми)   -  анонсировать
программу (пакет),  собрать под  анонс  деньги  и  затем
пускать в тираж. А пустив, забыть о пиратстве. "Програм-
ма не воробей - вылетит,  не  поймаешь".   Замечательный
способ, если сработает, лучше трудно придумать.
        - мы можем помочь в любой беде, решим любую Вашу
проблему.  И это не просто слова.  У нас большой опыт  в
электронике и отличные программисты.  Мы понимаем,   что
домашний  компьютерщик  -  наполовину  радиолюбитель   и
выполним любые Ваши заказы,  связанные с  компьютером  -
можете заказывать микросхемы,  распечатку любых текстов,
пока у Вас нет принтера и т.д.  Периферию,   которая  не
указана в каталоге (принтер,  мышь,  винчестер  и  т.д.)
тоже можно заказать. Но,  поскольку эти вещи редко зака-
зываются,  мы не включаем их в каталоги и не держим "про
запас".  Мы Вам укажем "вилку" Омских цен на  заказанную
вещь и,  если Вас устроют такие цены,  высылайте деньги,
на них мы и купим эту вещь.
        - мы, пожалуй, единственная фирма,  работающая с
наложенным платежом.   Практика  показывает,   что  люди
недоверчивы (к почте особенно)  и частенько предпочитают
"наложку" - дороже,  но надежней.  Подробней об условиях
заказа см. в каталогах.
        - наконец,  мы поможем Вам  в  самой  неприятной
ситуации  -  отремонтируем  Ваш  компьютер  и  периферию
(точнее - принтер,  дисковод,  блок питания,  винчестер,
контроллер,  квазидиск),  а также можем  заменить  самую
больную часть многих "Векторов" - клавиатуру.
        Тут самый нетерпеливый (или самый  недоверчивый)
читатель как закричит:  "Что вы мозги мне пудрите!  Мы и
то, мы и се, а что вы конкретно  сделали для "Вектора" ?
Вопрос,  безусловно,  требует честного и прямого ответа.
Последний состоит из нескольких пунктов:
        1. Альтернативное ПЗУ на 8 Кбайт.  Это ПЗУ заме-
няет Начальный Загрузчик (м/сх D9)  и отличается от всех
вариаций ПЗУшек на 2 Кбайта тем,  что в  остальных  6-ти
Кбайтах "зашит" очень неплохой монитор.  Загрузка  мони-
тора в ОЗУ происходит наиболее корректным способом - при
нажатии на ВВОД-БЛК память не очищается  и  монитор  за-
гружается сразу в самую верхнюю область ОЗУ  -  с адреса
E000 по FFFF.  Следовательно,   подавляющее  большинство
программ при этом не портится.  И такой способ подгрузки
монитора исключительно удобен при отладке программ. Есть
несколько режимов включения этого ПЗУ  в  работу.   Выше
описан один из них. Другой,  наоборот,  предназначен для
сохранения верхней половины ОЗУ -  видеоОЗУ.   При  этом
видеоОЗУ копируется в обычное ОЗУ  и  затем  загружается
монитор. Таким макаром можно "выловить" любую картинку в
любой момент.
        Наконец,  есть еще  одна  замечательная  (но  не
последняя) особенность этого ПЗУ. Существует т.н.  Magic
Key (термин позаимствован от Spectrum'а),  - "волшебная"
клавиша - нажав которую,  Вы копируете все 64 Кбайта ОЗУ
на квазидиск (конечно, если он есть),  при этом не меня-
ется ни один байт в ОЗУ.
        Следует добавить,  что последняя особенность  (и
еще некоторые изменения)  добавлены  в  самое  последнее
время и ПЗУ с этими изменениями  заменит  нашу  "старую"
версию с конца сентября. Сейчас оно проходит испытатель-
ный срок.
        2. Контроллер дисковода. Не будем хвастать, наша
версия не лучше других.  Но и  не  хуже.   Стоимость  ее
"среднерыночная". А вот по компактности он отличается от
многих. 115 х 83 мм.  Готовое изделие продается в полном
комплекте. То бишь, есть все, кроме самого дисковода.
        3. Электронный диск (квазидиск).  Возможно,  наш
Центр первым запустил в серию  вариант  ЭД  на  м/схемах
К565РУ7 (это 256 Кбайт в восьми  микросхемах).   Правда,
схема и описание ЭД на РУ7 появились в декабре 1993 г. в
"Радиолюбителе". Но это была просто нерабочая версия. Ее
не удалось запустить ни в Волгограде,  ни в Москве.   Мы
также решили с ней не сражаться,  а соорудили свою.  Вот
уже более полугода работаем на  своих  квазидисках  и  с
нами еще несколько десятков человек.  Две  отличительных
черты наших ЭД:  "сверхкомпактность" (115 х  70  мм)   и
легкое изменение конфигурации - емкость  ЭД  зависит  от
того,  какие м/схемы памяти Вы установите в панельки - 8
штук РУ7 или 8 штук РУ5. Соответственно будет 256 или 64
Кбайт.  Всем этим об"ясняется  и  довольно  низкая  цена
наших ЭД.
        4.  Музыкальная плата.  Здесь,  пожалуй,   нашей
заслуги практически нет.  Хотя схема полностью наша  (мы
вообще чужие разработки не  копируем),   но  сделать  ее
после того, как В.Саттаров из Кирова соорудил оригиналь-
ную версию для "Вектора",  не составило большого  труда.
Тут все аплодисменты - Саттарову. Остается добавить, что
наша плата полностью аппаратно и программно совместима с
оригиналом.
        5. A вот автономные часы (Real-Time  Clock)  это
другое дело.  Насколько известно,  никто к "Вектору"  их
еще не лепил.  Что они дают?  Ну,  можно  сказать,   это
маленькая,  недорогая,  но очень удобная вещица.  Удобна
тем,  что время всегда перед Вами  на  экране.   Драйвер
(программа,  обслуживающая внешнее устройство)  часов мы
впихнули внутрь ДОС и внутрь  монитора  нашего  ПЗУ.   В
скором времени мы впихнем его в Basic  v2.5 и в Монитор-
Отладчик.  Показания часов будут,   таким  образом,   на
экране в любое время,  за исключением игровых программ и
когда Вы сами запретите их вывод  на  экран.   Это  часы
РЕАЛЬНОГО времени, т.е. они показывают не "компьютерное"
время, а реальное - как Ваши настольные, наручные и т.п.
часы.  Это АВТОНОМНЫЕ часы  -  если  к  ним  подсоединен
внешний источник питания (любая батарейка или  аккумуля-
тор на 3-5 вольт), они "тикают" и при отключенном компь-
ютере. Наконец, это просто МОЩНЫЕ часы. Они без посторо-
нней помощи отсчитывают секунды,   минуты,   часы,   дни
недели и месяца, годы.  В них встроен один БУДИЛЬНИК.  В
установленное время он может и запищать,  и  вывести  на
экран короткое сообщение.  Это КОМПЬЮТЕРНЫЕ  часы  -  их
показания можно считывать и переустанавливать  только  с
помощью ПЭВМ и можно легко обращаться  к  ним  из  любой
программы.
        6.  Мы решили и можем еще решить проблему многих
измученных пользователей Астраханских и Кировских  "Век-
торов".  Их емкостная клавиатура бывает настолько отвра-
тительна, что расстаются с этими машинами на 80 % именно
изза нее.  К счастью,  у нас в городе довольно много уже
отживших свой век ПЭВМ "Партнер".  Ее корпус  как  будто
специально предназначен для того,   чтобы  уместить  там
плату "Вектора",  а клавиатура - лучше некуда.  Герконо-
вая,  с жесткими направляющими  (клавиши  не  шатаются),
мягкая в работе. Но поскольку нам приходится покупать не
только корпус с клавиатурой,  но и все остальное,  то мы
не можем продавать клавиатуру дешево (см. каталог).
        Пожалуй,  это все,  не считая полутора  десятков
системных программ, написанных нами для "Вектора".
        Теперь вкратце о перспективах.
        К концу октября мы, видимо,  закончим разработку
"картриджей". Это то же внешнее ПЗУ,  что делают некото-
рые фирмы,  но с несколькими сервисными отличиями.
Емкость картриджей будет от 32 до  128  Кбайт, стоимость
соответственно (в ноябре)  от 18 до 33-37 тысяч.  В кар-
триджи будут "зашиваться" системные и игровые программы.
При обращении к  картриджу  на  экран  будет  выводиться
каталог зашитых в ПЗУ программ.
        В ноябре попытаемся соорудить акустический модем
- устройство, 
компьютерной сетью по телефонной линии. С помощью модема
Вы можете передавать файлы Вашему товарищу, не выходя из
квартиры.  Если у Вас есть принтер,  то это уже  готовый
телефакс.
        В декабре планируем закончить работу  по  замене
процессора КР580  на  Z80.   Это  "облегченный"  вариант
замены,  он  абсолютно  не  рассчитан  на  совместимость
"Вектора" со SPECTRUM'ом (кстати,  такой "адаптер"  раз-
работан в Кишиневе,  он по стоимости почти равен  самому
SPECTRUM'у,  так что  непонятно  -  почему  бы  желающим
просто не купить последний?  ).   Цель  такой  замены  -
повысить быстродействие "Вектора" на 15-20% и обеспечить
надежность работы ПЭВМ при дальнейшем увеличении нагруз-
ки на его процессор и шины данных и адреса. Соответстве-
нно,  и стоимость такой "операции" на Векторе  будет  не
шибко высокой.
        В декабре-январе попробуем соорудить музыкальную
плату Sound  Blaster.  Это устройство  не  имеет  ничего
общего с существующей платой  Sound   Tracker.   Разница
примерно как между простым плейером и проигрывателем  на
оптических дисках. Это довольно сложное устройство будет
состоять из 30-35 микросхем и стоить  будет  недешево  -
примерно как сам "Вектор".  Но оно  будет  того  стоить!
Ведь оно обеспечит звучание IBM'овских  "музыкалок",   а
это  при  хорошей  звуковоспроизводящей  аппаратуре   по
качеству мало чем отличается от проигрывания  оптических
компакт-дисков. Разве только тем,  что будет возможность
производить с этой музыкой разнообразные эксперименты  и
получать всевозможные эффекты.
        Вот пока и все.  Будем считать,  что  знакомство
состоялось.  А  чтобы  поближе  познакомиться,   милости
просим - обращайтесь к нам в любое время  года,   всегда
рады помочь Вам.
        ----------------------------------------
                 П Е Р И Ф Е Р И Я

        Всякому ясно,  что сам по себе  компьютер  почти
ничего не значит.  Чтобы он  "ожил"  и  стал  интересной
вещью, ему нужно, во-первых,  программное обеспечение и,
во-вторых,   посредники,   которые  смогут  поддерживать
отношения между ним и  человеком.   Все  эти  посредники
называются периферийными устройствами.  Некоторые из них
абсолютно необходимы (к таковым прежде  всего  относятся
клавиатура и "экран" - монитор или телевизор), остальные
могут быть отнесены либо к необходимым средствам, либо к
роскоши. Это кому что нужно от ПЭВМ.
        Какая вообще существует периферия и что из этого
уже можно подсоединить к "Вектору",  а что только  заду-
мывается и разрабатывается  разными  фирмами?   Об  этом
данная статья.

        1. К Л А В И А Т У Р А

        Довольно больной вопрос для большинства  пользо-
вателей.  Выпускаются "Векторы"  в  двух  вариантах:   с
герконовой клавиатурой и с емкостной (точнее -  квазием-
костной).  Если герконовая вполне терпима,  то емкостная
оставляет желать лучшего - ее недостатки слишком очевид-
ны,  чтобы их перечислять.  Последнюю лучше всего  заме-
нить,  если есть такая возможность.  Для этого  подойдет
любая приличная контактная  или  герконовая  клавиатура.
Конечно, придется с ней повозиться.
        Подключить к  "Вектору"  клавиатуру  от  "РК86",
"Апогея" и "Партнера"  достаточно  просто,   их  матрицы
почти полностью совпадают (у каждой клавиши два  контак-
та,  контакты 64-х клавиш об"единяются  в  "линейки"  по
восемь штук.  Всего таких линеек  получается  дважды  по
восемь и они образуют как бы сетку -  восемь  линеек  по
горизонтали пересекаются с восемью линейками  по  верти-
кали.  Каждое место пересечения - это один из  контактов
клавиши.  Такая организация клавиш и  называется  матри-
цей).  Клавиатуру "Микроши" и "Кристы" подключить  чуток
сложнее,  но тоже не трудно.  Подключить  клавиатуру  от
других ПЭВМ при условии,  что она контактная или  герко-
новая,  уже довольно трудоемкое занятие - придется пере-
соединять по-новой практически все  клавиши  -  но  тоже
возможно.  Нужно только огромное внимание,   терпение  и
часов за 15-20 это можно сделать.
        Но самое интересное  -  подключить  к  "Вектору"
электронную клавиатуру (с IBM и IBM-совместимых ПК). Это
был бы идеальный вариант.  Возможно ли это  в  принципе?
Да,  возможно.  И над этим уже маракуют ребята в Кирове.
Для этого необходимо соорудить  электронное  устройство,
преобразующее сигналы,  поступающие к клавиатуре "Векто-
ра",  в сигналы,  нужные для  электронной  клавиатуры  и
наоборот.  Программная адаптация сигналов здесь неприем-
лима,  поскольку  при  этом  придется  переделывать  все
игровые программы и половину системных и прикладных.
        Хорошо,  а что же делать тем  несчастным,   кого
клавиатура напрочь измучила и  негде  взять  другую  для
переделки? Кто еще не пробовал самого простого способа -
может пока применить его,  на некоторое время он поможет
(в зависимости от условий эксплуатации ПЭВМ и  от  того,
когда и где она изготовлена,  этой чистки хватает от  10
дней до 2-3 месяцев).  Клавиши у "Вектора"  очень  легко
снимаются - Вы увидите, что снизу прикреплен кружочек из
простой золотинки.  Он  должен  замыкать  две  половинки
контакта клавиши.  Вся беда заключается в том,  что  эти
половинки окисляются и еще на них попадает пыль.   Когда
контакт  сильно  окислится  или  загрязнится  -  клавиша
перестает нормально работать. Значит, этот контакт нужно
очистить.  Берете спичку,   наматываете  на  нее  ватку,
смачиваете ее в одеколоне или спирте и протираете конта-
кты. Улучшение заметно сразу.
        Но бывают настолько быстро окисляемые  клавиату-
ры,  что постоянное применение такой  чистки  раздражает
настолько,  что просто руки опускаются.  Что  еще  может
помочь?  Попробуйте (сначала на 2-3-х  клавишах)   такой
способ: сначала протрите все-же их (обезжирьте), а затем
аккуратно покройте тонким слоем олова,  как бы  залудите
их.  Но учтите - припой тоже бывает  разный,   бывает  и
легкоокисляемый.  Известно от  некоторых  пользователей,
что эта мера срабатывает очень неплохо и надолго.
        Больше к вопросу о клавиатуре мы возвращаться не
будем.
        Остальные периферийные устройства будут  описаны
кратко, а в последующих номерах "Гепарда" мы остановимся
на каждом из них подробнее.

        2. Д И С П Л Е Й

        К "Вектору" достаточно просто  подключить  любой
черно-белый или CGA-монитор (цветной),  причем не только
те, которым требуется полный телевизионный сигнал (ПТС),
но и те,  которые требуют отдельной  подачи  кадровых  и
строчных синхроимпульсов.  (Конечно,  мы расскажем,  как
это сделать. Но не сейчас.)  Чаще всего подключают мони-
тор "Электроника-6105",  потому что их просто достать  и
легко подключить.
        Конечно,  чаще всего к бытовой  ПЭВМ  подключают
телевизор.  Но с телевизором приятно играть  в  игрушки,
работать же довольно тяжело - глаза устают.

        3. М А Г Н И Т О Ф О Н

        Кроме основной функции - внешнего  запоминающего
устройства -  служит  еще  для  воспроизведения  звуков.
Хорошего усиления звука можно добиться и  другим  спосо-
бом,  подключив подходящий  динамик  вместо  несчастного
микрофончика. Правда,  нужно будет слегка изменить схему
вывода звука в "Векторе" и соорудить простенький  усили-
тель на трех транзисторах или одной  микросхеме-усилите-
ле. В следующем номере мы опубликуем такую схему.
        Лучше  всего  использовать  мономагнитофон   2-3
класса.  Нежелательно использовать плейера  (из-за  сла-
бенького лентопротяжного устройства)  и стереомагнитофо-
ны.

        4. Д И С К О В О Д

        Или точнее  -  накопитель  на  гибких  магнитных
дисках (НГМД).   Обеспечивает  очень  быстрое  чтение  и
запись данных на дискеты (гибкие магнитные диски -  ГМД)
- в 50-70 раз  быстрее  магнитофона,   причем  доступ  к
данным не последовательный, а произвольный.
        Дисководы  в  большинстве  случаев  используются
двухсторонние, 80-дорожечные. Т.е. имеют две универсаль-
ных головки, работающие с дискетой с двух сторон - снизу
и сверху,  они двигаются  от  внешнего  края  дискеты  к
центру и обратно шажками, могут сделать 80 шажков (соот-
ветственно,  разбить дискету на 80 концентрических доро-
жек). Дискеты имеют размер 5.25 дюйма (130 мм) в диамет-
ре, поэтому такие НГМД называют пятидюймовыми.  Основные
используемые марки - МС5305, МС5313, МС5311 (советские),
ЕС5323 (болгарский),  МС5329 (или "ROBOTRON"  -  герман-
ский) и FD55 (TEAC - Япония).  Лучше всех зарекомендовал
себя "ROBOTRON".
        Без проблем подключаются  и  трехдюймовые  НГМД.
Они гораздо компактнее и приятней в работе,  но  дискеты
для них в 3-4 раза дороже. Правда,  надежней - не гнутся
и надежно защищены. Диаметр дискет - 3.5 дюйма (90 мм).
        Чтобы подключить дисковод к ПЭВМ,  нужно  специ-
альное устройство - контроллер НГМД.  Это довольно слож-
ное устройство и в данное время есть аж  три  типа  кон-
троллеров для "Вектора".  Самый распространенный -  т.н.
Кишиневский вариант.  Самый диковинный и нестандартный -
вариант COMAN  (московская  фирма).   Более  подробно  о
различиях и о работе контроллеров см. "Секреты "Вектора"
и "Кристы".

        5. П Р И Н Т Е Р

        Подключить к "Вектору",  как  и  к  любой  ПЭВМ,
можно любой принтер.  Все  обилие  печатающих  устройств
можно разделить на три вида по типу  печати:   матричные
(игольчатые, ударного типа)  - печать осуществляется при
помощи восьмидевяти иголочек,  наносящих удары по бумаге
через пишущую ленту (бывает и большее число иголок -  до
24-х).  Этот тип ПУ самый популярный и надежный.  Другой
тип - струйные ПУ.   Печать  осуществляется  чернильными
струйками,   вылетающими  через  капиллярные   отверстия
подобно иголочкам.  Их основные  достоинства  -  компак-
тность,  низкая стоимость и бесшумная работа.   Основные
недостатки - трудно достать специальные чернила,  печать
менее качественная,  нежели у  матричных  ПУ,   печатать
можно за раз только один  экземпляр  (через  копирку  не
пойдет).  Но вообще,  если  печатать  предполагается  не
шибко много и  не  шибко  красиво  -  машинка  неплохая.
Третий тип - лазерные принтеры.   Это,   конечно,   вещь
великолепная,  но и жутко дорогая - в районе 1000 долла-
ров. Печатает очень быстро, исключительно качественно.
        Кроме такого разделения,  ПУ можно разделить еще
на  EPSON-совместимые  и  не  совместимые  по  стандарту
управляющих кодов печати.  Надо сказать,  что почти  все
драйверы печати предполагают EPSON-совместимость принте-
ра.  В противном случае могут быть разные  проблемы  при
распечатке текстов.  Среди EPSON-несовместимых пока  еще
более-менее распространены польский D-100 и  отечествен-
ный - MС6304.
        Наконец,  можно разбить принтеры по  способу  их
соединения с ПЭВМ (соединение между устройствами называ-
ется интерфейсом).  Существует 4 основных вида интерфей-
са: 2 последовательных (СТЫК С2 и ИРПС) и 2 параллельных
(ИРПР и CENTRONICS).
        Опять же - подключить можно ПУ с любым интерфей-
сом,  но 99% программ - распечатчиков  работают  либо  с
CENTRONICS'ом, либо с тем драйвером печати, который есть
в системных программах (BASIC,  Монитор,  ДОС),  а  этот
драйвер всегда рассчитан на CENTRONICS. В крайнем случае
его  достаточно  просто  адаптировать  на  ИРПР  (стоить
отметить,  что интерфейс ИРПР не очень трудно  аппаратно
переделать  на  CENTRONICS).  ИРПР  бывает  в  принтерах
D-100, D-100M, ROBOTRON.
        Какой самый оптимальный принтер?  Если Вам печа-
тать немного и только для себя,  наверное,   это  МС6312
(струйный).  Но вообще-то лучше матричный  принтер.   На
сегодняшний  день  вполне  хорош  из  "узких"  принтеров
СМ6313 или ROBOTRON, а из широких - СМ6337 или "Орион".

        6. Э Л Е К Т Р О Н Н Ы Й   Д И С К

        Это дополнительное ОЗУ от 64 Кбайт до 1  Мбайта,
доступ к которому организован как к внешнему  устройству
(типа дисковода).  Какие преимущества  дает  электронный
диск (он же - квазидиск)?
        Для тех,  у кого нет дисковода,  позволяет напо-
ловину, если не больше, сократить работу с магнитофоном,
но самое главное - пользоваться почти всеми программами,
работающими с ДОС (дисковая операционная система).   Эти
программы намного мощней и интересней своих  магнитофон-
ных "предков".   Собственно,   магнитофон  нужен  только
вначале - загрузить диск нужными программами,  и в конце
- сохранить наработанное перед отключением ПЭВМ. Если на
диск первым делом записана ДОС,  то при нажатии на ВВОД-
БЛК Вы сразу входите в ДОС. Наконец,  очень важное преи-
мущество квазидиска - быстродействие. Ведь доступ к нему
практически моментальный, это та же память.
        Для тех,  у кого есть дисковод -  это  доступ  к
вдвое большему  количеству  программ,   поскольку  очень
многие программы требуют более  28  Кбайт  памяти.   При
наличии квазидиска ДОС помещается в него  и  освобождает
тем самым еще 18 Кбайт.  И опять же - быстродействие.  И
щадящий режим для дисковода и дискет. Имея квазидиск, Вы
будете в десять раз меньше обращаться к НГМД.
        ЭД более 256 Кбайт (до 1 Мбайта)   разработан  в
COMAN'е (московская фирма),  но  работает  только  с  их
контроллерами.

        7. В Н Е Ш Н Е Е   П З У

        В основном,  это находка для тех,   у  кого  нет
дисковода.  Загрузка программ из внешнего ПЗУ происходит
моментально.  Но это только загрузка.  Записать  в  него
обычными средствами ничего  нельзя.   Нужно  специальное
устройство - программатор.
        Во внешнее ПЗУ из системных программ  "зашивает-
ся", как правило - BASIC, Монитор-Отладчик,  редакторы и
некоторые другие программы (в т.ч. и игровые).

        8. М У З Ы К А

        В настоящее время  существует  практически  один
вариант музыкальной платы, так называемый SOUND TRACKER.
Пальма первенства принадлежит Кировчанам.  Плата обеспе-
чивает  стереопроигрывание  мелодий  и   воспроизведение
шумовых эффектов.  4 независимых канала.  Легко (относи-
тельно) адаптируется музыка со SPECTRUM'а.  На сегодняш-
ний день есть два  десятка  программ-"музыкалок".   Надо
думать, популярность его будет быстро возрастать.  Музы-
ка, конечно, гораздо лучше и эффектней,  чем у собствен-
ного Векторовского трехканального "синтезатора".
        Теоретически есть еще одно  музыкальное  устрой-
ство - COVOX. Теоретически потому, что никем не изготав-
ливается.  Хотя соорудить его может любой мало - мальски
умеющий держать в руках паяльник.  Достоинство COVOX'а -
в исключительной простоте  и  очень  приличном  качестве
звучания.  Недостаток один,   но  существенный  -  очень
короткое звучание. На 1 секунду хорошего,  качественного
исполнения идет до 10 Кбайт памяти.   Если  забить  весь
квазидиск и всю память музыкальным отрывком  (около  300
Кбайт), он будет звучать целых (!) 35-40 секунд. Два-три
таких отрывочка занимают целую дискету.
        Схему COVOX'а мы обязательно опубликуем.

        9. Д Ж О Й С Т И К

        Этим устройством  удобней,   чем  с  клавиатуры,
управлять персонажами игр.  Кроме  того,   он  выполняет
очень полезную функцию - защищает самые  используемые  в
играх  клавиши  от  преждевременного  изнашивания  и  от
поломок. Заменить джойстик чаще всего проще,  чем  поло-
манные клавиши.
        Существует три основных типа  подключения  джой-
стика. И, пожалуй,  самый распространенный - подключение
параллельно клавиатуре. При этом все-равно, что нажимать
- клавиши или джойстик.  Хочется предупредить тех,   кто
самостоятельно решил подключить таким образом джойстик -
не вешайте его прямо на клавиши!  Мало  того,   что  это
очень неаккуратное решение,  оно и не безопасно!  - мик-
росхема КР580ВВ55 получается незащищенной  от  замыканий
между линиями.  И вполне может "вылететь".  Как  сделать
правильно? Закажите у нас схемы подключения джойстиков.
        Второй способ - подключение к одной линии парал-
лельного интерфейса (раз"ем ПУ).  Это т.н.   джойстик-П,
пожалуй, самый корректный способ подключения.
        Третий - т.н.  джойстик-УСПИД (по названию фирмы
в Екатеринбурге). Позволяет подключать два джойстика.  В
"классической" схеме УСПИД-джойстика есть одно,  на  наш
взгляд,  опасное место:  +5в.  подаются прямо  на  линии
порта. Лучше здесь поставить резистор 20-30 ом.
        Наконец,  еще один - но это только в Кишиневских
"Векторах" - джойстик "С". Это аппаратное решение завода
"Счетмаш" и моделировать  такой  джойстик  на  остальных
ПЭВМ слишком сложно, хлопотно и просто не стоит.

        10. R E A L - T I M E C L O C K

        Уже кратко описаны в предыдущей статье.   Теоре-
тически никак не об"яснишь -  зачем  они,   в  принципе,
нужны.  Но поработав с ПЭВМ,  к которой они  подключены,
так быстро к ним привыкаешь,  что "нутром" ощущаешь -
с ними много лучше, чем без них.

        11. М Ы Ш Ь

        Ходят,  ходят какие-то  слухи  (и  даже  в  паре
программ мышь мелькала в меню среди джойстиков) о какой-
то мыши. Но нам ничего достоверно не известно. Известно,
что подключить стандартную IBMовскую мышь  просто,   все
дело только в программной поддержке. Мышь-то хоть завтра
можно подключить. Но ни одна из существующих программ ее
не поддерживает.  Значит,  нужно их адаптировать.  Стоит
подумать - может,  есть смысл проделать эту  грандиозную
работу по адаптации "NORTON'ов", графредакторов,  оболо-
чек ДОС, текстовых редакторов и пр.?

        12. Г Р А Ф О П О С Т Р О И Т Е Л Ь

        Это примерно то же, что принтер, но в отличии от
него не печатает и не иголочками,  а рисует фломастерами
(или что ему всунешь).  Предназначен для рисования  раз-
личных схем,  рисунков,  планов и т.п.  Подключить то же
самое, что принтер с последовательным интерфейсом.  Если
у Вас вдруг возникнет такая проблема  -  шлите  нам  его
документацию и шнур, соединяющий его с ПЭВМ,  мы сделаем
программу и переделаем шнур под  "Вектор".   Приходилось
сталкиваться.

        13. М О Д Е М

        Имеется в виду телефонный модем. Это устройство,
соединяющее одну ПЭВМ с другой или с  несколькими  через
телефонную линию.  Кратко уже описано выше.   Разработан
для "Вектора" в Кишиневе.  Эта  версия  предполагает  не
только собственно модем,  но и автоматический  определи-
тель номера (АОН)  звонящего  абонента,   а  также  кучу
сервисных операций.

     14. Ж Е С Т К И Й   Д И С К или "В И Н Ч Е С Т Е Р"

        Это накопитель на магнитных дисках, но в отличии
от НГМД (дисковода),  эти диски не сменные,  а жестко  и
недоступно укреплены внутри  герметизированного  устрой-
ства.  Запись на  них  осуществляется  с  очень  высокой
плотностью,  поэтому и емкость таких  дисков  велика  по
сравнению с дискетами - от 5 Мегабайт (1 Мегабайт = 1000
Кбайт) до сотен Мегабайт. К "Вектору" оптимально было бы
подключить "винт" емкостью 10-40 Мбайт.  Но кто бы  под-
ключил? Контроллер НГМД для этой цели не годится.  Гово-
рят,  в Кирове занялись этой проблемой.  Но  вероятность
появления контроллера "винчестера" для "Вектора" доволь-
но слабая.
        Чем он лучше дисковода?  Тем,  что  с  ним  ПЭВМ
работает в несколько раз быстрее,  чем с НГМД и не нужно
все время перетыкивать  дискеты.   Для  тиражаторов  это
просто мечта.
        Ну вот,  все основные устройства описаны.  Есть,
конечно,  еще кучка специальных и даже просто экзотичес-
ких устройств.  Но это нужно  для  каких-либо  абсолютно
конкретных целей (управлять "видиком"  или  телесправкой
на вокзале и т.д.)  и широкому кругу пользователей неин-
тересно.
         ------------------------------------
                А С С Е М Б Л Е Р

        Многие пользователи ПЭВМ пробуют программировать
на Ассемблере. Но большинство не может его "победить". В
основном потому, что нет, в сущности, ни одного нормаль-
ного пособия, обучающего программированию на Ассемблере.
А чтобы сделать путевую программу на любом языке, знание
Ассемблера абсолютно необходимо.  Только  на  нем  можно
написать самую быстродействующую программу,   только  он
дает четко понять, как устроена ПЭВМ, наконец, Ассемблер
приучает к хорошему стилю программирования.
        Можно сказать,  что программирование  на  Ассем-
блере - занятие не из простых.  Но это только на  первый
взгляд. Главное - вникнуть в "мышление" ПЭВМ,  понять ее
логику и принципы работы. Другими словами,  программируя
на BASIC'е, Фортране и т.д.,  Вы общаетесь с ПЭВМ как бы
через переводчика и,  естественно,  нужны некоторые уси-
лия, чтобы изучить родной язык компьютера. Но зато потом
Вам будет гораздо легче добиваться от него желаемого,  в
том числе и на всех других языках.
        Ну, хватит предисловий, приступим к делу.
        Чтобы  начать  программировать  на   Ассемблере,
нужно   понять   (слегка),     как   устроен     процес-
сор (КР580ВМ80),  как он связан  с  памятью  и  внешними
устройствами.  Почему так?  Потому что язык Ассемблера -
это команды,  которые Вы даете самому процессору.,  а уж
он затем производит необходимые действия -  либо  внутри
себя чего-то преобразует,  либо дает необходимые команды
остальным частям ПЭВМ.
        Для  программиста  процессор  -  это   несколько
"счетных палочек",  называемых регистрами;  с ними можно
произвести, собственно, всего три типа операций:
- запомнить в регистре (-ах) какое-либо число;
- произвести арифметические или логические действия с
  числом в регистре или с числами  в  разных  регистрах,
  т.е. изменить содержимое регистров;
- переслать число из регистра (-ов) в память или внешнее
  устройство и наоборот.
        С помощью этих  операций  можно  заставить  ПЭВМ
вытворять, что угодно. Действительно, рассмотрим, напри-
мер, как делается изображение (1)  и как программируется
музыка (2).
        (1). Известно, что ПЭВМ, как и человек, обладает
памятью.  "Клетки" памяти здесь  называются  ячейками  и
располагаются они в нескольких (или в нескольких  десят-
ках - неважно)  микросхемах.  В "Векторе" память состоит
из двух половинок - обычная память и ВИДЕОпамять.   Соб-
ственно,  это одно и то же,  но схема "Вектора"  такова,
что содержимое ВИДЕОпамяти выводится на экран, а обычной
памяти - нет.
        Всех ячеек памяти в ПЭВМ - 65535 штук и в каждой
находится какое-то  число.   Каждая  ячейка  имеет  свой
порядковый номер (адрес).  Ячейки ВИДЕОпамяти располага-
ются с адреса 32768 и по 65535. Схема устроена так,  что
каждая из этих ячеек может отображаться в  строго  опре-
деленном для нее месте экрана в виде полоски из несколь-
ких точек (от одной  до  восьми)   или  не  отображаться
вовсе,  в зависимости от ее содержимого.  Таким образом,
помещая в определенные ячейки  ВИДЕОпамяти  определенные
числа,  можно нарисовать на экране все,  что угодно.   А
чтобы поместить в любую из ячеек памяти  число,   хватит
всего две команды: поместить это число в регистр процес-
сора и перекинуть число из регистра в эту ячейку.
        (2).  Музыка.  В регистр помещается число  (одна
команда)  и посылается  во  внешнее  устройство  (вторая
команда).  Этим внешним устройством может  быть  таймер,
или ЦАП (цифро-аналоговый преобразователь), или динамик.
Это мы говорим - число.  Фактически-то посылаются  элек-
трические сигналы.  Но это не наше дело.   Мы  выполняем
несколько раз эти  две  команды  -  и  получаем  звучок.
Разные числа - разные звуки.
        Как видите, все очень просто.  Но чтобы было еще
и красиво, и удобно, и быстро,  нужно очень хорошо уметь
оперировать с этими регистрами и с памятью.  Собственно,
все программирование на Ассемблере заключается в  опера-
циях с регистрами и с памятью.
        Разберем теперь, что из себя представляют регис-
тры процессора и ячейки  памяти.   Можно  считать,   что
регистр - это тоже ячейка памяти, но это "личная" память
процессора.  Всякая  ячейка  памяти  состоит  из  восьми
"лунок".  Каждая из них либо полная,   либо  пустая.   В
числовом представлении - либо 0, либо 1.  Другими слова-
ми,  каждая ячейка состоит из восьми цифр.   Например  -
00100101 или 10100001 и т.п. Каждая из "лунок" называет-
ся БИТОМ (информации).  Восемь бит в целом -  это  БАЙТ.
Такая система представления чисел (употребляются  только
0 и 1)  называется ДВОИЧНОЙ системой.  Писать программу,
употребляя такую  систему,   довольно  тяжко  -  слишком
длинные   числа    выходят   (число   21913     выглядит
так:  0101010110011001,  а  ведь вся память - это адреса
аж до 65535).  Но и десятичную,  привычную нам  систему,
использовать тоже неудобно по той  причине,   что  очень
часто нужно сразу видеть,  на каком месте находятся нули
и единички в байте,  ведь процессор в конце-концов  опе-
рирует именно с нулями и единицами - т.е.  "есть сигнал"
или "нет сигнала",  "да" или "нет",   "делать"  или  "не
делать".  По всему поэтому принято употреблять  ШЕСТНАД-
ЦАТИРИЧНУЮ систему счисления.
        В 16-ричном числе очень хорошо  "просвечиваются"
места нулей и единиц в байте.   Нужно  только  научиться
преобразовывать четырехзначное  двоичное  число  в  одну
цифру (16-ричную) и наоборот.
        Что мы имеем в десятичной системе?  10 цифр - от
0 до 9.  Возьмем,  к примеру,  число 18.  Как образуется
следующее число? Мы увеличиваем на единицу самый младший
разряд: 18 --> 19.  А дальше?  Берем опять самый младший
разряд.  Там 9.  И цифр только 9.  Тогда мы делаем так -
этот разряд обнуляем,  но увеличиваем на единицу следую-
щий (по старшинству)  разряд:  19 --> 20.  А если  такое
число - 299? Общее правило - если в разряде цифру уже не
увеличишь,  обнуляем его и переходим к следующему разря-
ду, чтобы увеличить на единицу его: 299 --> 300.
        Абсолютно то же - в любой системе.   В  двоичной
всего две цифры - 0 и 1. 0 - это 0. 1 - это 1. А дальше?
Дальше по общему правилу: цифру уже не увеличишь, значит
обнуляем этот разряд и увеличиваем на единицу  следующий
по старшинству:  1 --> 10.  Дальше?  10 --> 11.  Дальше?
Опять по общему правилу: 11 --> 100.
        Теперь что у нас с 16-ричной системой.  В двоич-
ной - две цифры есть. В десятичной - 10.  В шестнадцати-
ричной, следовательно,  должно быть 16 цифр.  0,1,2,3,4,
5,6,7,8,9, а дальше? Дальше - A, B, C, D, E, F. Вот такие
цифры. А дальше? F --> ?  Да все то же правило: F --> 10
--> 11 --> ... ---> 1F  --> 20 и т.д.
        А теперь посмотрим,   как  соотносятся  числа  в
двоичной и 16-ричной системах:
0000  -  0              1000  -  8
0001  -  1              1001  -  9
0010  -  2              1010  -  A
0011  -  3              1011  -  B
0100  -  4              1100  -  C
0101  -  5              1101  -  D
0110  -  6              1110  -  E
0111  -  7              1111  -  F

        Все,   дальнейшее  увеличение  двоичного   числа
выйдет на пятую позицию:  1111 --> 10000.  А что  с  16-
ричным числом? Выходит на вторую позицию: F --> 10. 
 10000  -  10
 10001  -  11
 ......
 11111  -  1F
100000  -  20
100001  -  21
.......
1111 1111  -  FF

        Если Вы наблюдательны, то заметили уже,  что две
четырехзначных  половинки  двоичного   числа   абсолютно
равноправны - каждую из них можно,  не глядя на  другую,
преобразовать в 16-ричное число.  Любое  двоичное  число
очень просто преобразуется в 16-ричное:   разбиваем  его
справа налево по четыре разряда и каждое такое  четырех-
разрядное число преобразуем в 16-ричное:
101 0101 1001 1001 = 5599 (в 16-ричной системе!)
=5   =5   =9   =9
        И наоборот:
3 5 F 2 = 0011 0101 1111 0010 или 11010111110010
| | | |
| | | |0010
| | |1111
| |0101
|0011
        Если Вы будете  ежедневно  упражняться  в  таком
преобразовании,  через несколько дней Вы  сможете  сходу
устно превращать любое двоичное число в любое  16-ричное
и наоборот.
        Теперь Вы понимаете,  что такое байт - число  из
восьми двоичных цифр (0 или 1)  или  из  двух  16-ричных
цифр.  В одной ячейке памяти может быть только один байт
информации.  В одном регистре процессора так же.   Таких
регистров всего восемь.  И  есть  еще  два  двухбайтовых
регистра (говорят чаще - 16-тиразрядных). И этого вполне
хватает для всей массы всевозможных операций.
        Все регистры имеют свое имя. Имеются различия не
только в именах,  но и в функциях  регистров.   Давайте,
наконец, обзовем регистры:
        - регистр A  - он же "аккумулятор".  Его главная
функция - выполнять арифметические и логические операции
над числом,  помещенным в этот регистр,  а  также  между
этим и другим числом или числом,   помещенным  в  другой
регистр;
        - регистры B, C,  D,  E,  H,  L  - могут хранить
число и увеличивать или уменьшать его  на  единицу  (ин-
крементировать или декрементировать);
        - регистр F  -  специфический  регистр,   с  ним
нельзя производить никаких  действий,   но  он  отражает
результат многих операций (например, сложили два числа -
анализируя его,  можно,  не видя самого результата,  уз-
нать,  какой он получился:  нулевой-ненулевой,   четный-
нечетный,   отрицательный-положительный  и  пр.).   Этот
регистр еще называют регистром флагов.
        Действия с  регистром  A   всегда  отражаются  в
регистре F  и поэтому они как бы об"единены и  эту  пару
называют словом состояния процессора и обозначают - PSW.
        Другие регистры также часто об"единяются в пары,
тогда с ними можно производить  более  мощные  операции.
Такая пара обозначается не двумя,  а одной  буквой,   по
старшему регистру - регистровые пары B (B+C), D (D+E), H
(H+L).  Их функции мы рассмотрим  при  разборе  примеров
программ.
        Один  из  16-тиразрядных  регистров   называется
счетчик команд и обозначается - PC.  Он  содержит  адрес
ячейки памяти, в которой находится команда, следующая за
выполняемой в текущий момент.
        Наконец, последний регистр, также 16-разрядный :
регистр стека (обозначается - SP). Он служит для органи-
зации в любой области памяти особого ее участка, называ-
емого стеком.  Что такое  стек?   Это  довольно  простая
организация хранения данных по принципу: последним вошел
- первым вышел. Т.е.,  если Вы складываете в стек (поме-
щаете в память) числа 1, 2, 3,  4,  5,  то вытащите их в
только в таком порядке - 5, 4, 3, 2,  1.  Для чего необ-
ходим стек? Две основных функции.  Первая - нужно выпол-
нить подпрограмму,   но  регистры  после  ее  выполнения
измениться не должны.  Значит,  перед выполнением п/п их
нужно где-то спрятать (т.е.  их содержимое),  а после  -
восстановить. Где их сохранить? В стеке.  Есть специаль-
ные команды,  позволяющие "засунуть" содержимое регитро-
вой пары в стек и вытащить его оттуда.  Другая функция -
вызывается подпрограмма,  после ее окончания нужно  вер-
нуться на то место, откуда она была вызвана и продолжить
работу основной программы.  Так вот сама команда  вызова
подпрограммы  автоматически  запоминает  в  стеке  адрес
возврата из подпрограммы.
        Ну,  вот,  собственно,  и весь процессор с точки
зрения программиста.
        Далее  положено  рассматривать  систему   команд
процессора. Но "мы пойдем другим путем". Давайте сначала
залезем в редактор,  "напишем" программку,  разберем  ее
работу,  заодно разобрав и некоторые самые  "популярные"
команды, затем переведем ее в машинные коды и,  наконец,
запустим ее.
        Итак,  первое - залезть  в  редактор  и  набрать
текст программы.  И первый вопрос - какой  редактор.   У
кого нет дисковода - и выбора нет,   редактор  "EDASSM",
естественно,  с Монитором-Отладчиком (оба  на  заводской
кассете). У кого дисковод, лучше всего редактор MAR (или
MARGO), а вообще-то, можно в любом редакторе работать.
        Итак, предлагается такая программа: 

ORG 100H                ;начало программы - адрес 100H
        MVI C,2 
        MVI E,0CH
        CALL 5          ;очищаем экран
        MVI A,0         ;отключаем
        OUT 10H         ;   квазидиск
        LXI  H,0A07EH   ;в ячейку памяти с  адресом A07E
M1:     MVI M,0FFH      ;посылаем байт из восьми единичек
        INR H           ;переходим к другой ячейке
        MOV A,H         ;и, если это еще не A87E,
        CPI 0A8H
        JNZ M1          ;идем на цикл M1
M2:     MVI  M,80H      ;теперь в ячейки  видеопамяти  -
                        ;байт из одной единички.
        INX H           ;переходим к следующей ячейке
        MOV A,L         ;и, если это
        CPI 0D0H        ;   еще не A8D0,
        JNZ M2          ;идем на цикл M2
        DCX H           ;переходим к ячейке
M3:     DCR H           ;   с адресом A7CF,
        MVI M,0FFH      ;посылаем туда байт FF
        MOV A,L         ;и, если это
        CPI 0A0H        ;   еще не A0CF
        JNZ M3          ;идем на цикл M3
M4:     DCR L           ;переходим к ячейке A0CE,
        MVI M,80H       ;посылаем туда байт 80H
        JM M4           ;и, если это еще не A07F, идем на
                        ;цикл M4
        MVI A,23H       ;включаем
        OUT 10H         ;   квазидиск
M5:     MVI E,0FEH      ;опрашиваем
        MVI C,6         ;   клавиатуру
        CALL 5
        ORA A           ;если ничего не нажато,
        JZ M5           ;идем снова на опрос клав.
        LXI D,VIC       ;в DE - адрес сообщения
        MVI C,9         ;выводим это
        CALL 5          ; сообщение
        JMP 0           ;и выходим в монитор (или в ДОС).
VIC:    DB 1BH,59H,28H,25H,'УРА !',0AH,0AH,0AH,0AH,0AH,24H
END

        Чтобы этот текст  стал  выполняемой  программой,
нужно сначала перевести все эти команды в машинные коды.
Это может сделать ТРАНСЛЯТОР с языка АССЕМБЛЕР. Пока что
мы имеем только текст программы,  называется он  ЛИСТИНГ
или ИСХОДНИК (исходный текст программы).  Чтобы трансля-
тор смог правильно,  без ошибок перевести исходник прог-
раммы в машинные коды,  последний должен быть  правильно
оформлен. Правил совсем немного:
        1. Команды не должны содержать орфографических и
           синтаксических ошибок.
        2. Они  должны  набираться латинскими символами,
           желательно  заглавными (некоторые трансляторы
           не работают со строчными буквами).
        3. Строка должна иметь определенную структуру.

        Что это за структура? Очень простая:

Метка: Команда ;комментарий

        Что такое метка?  Это произвольный набор  симво-
лов,  помечающий место в программе,   к  которому  будут
обращения из других  мест.   Если  программа  длинная  и
запутанная, метки лучше давать "осмысленные", чтобы было
видно,  что за кусок программы она помечает.  Лучше  ис-
пользовать заглавные латинские  буквы,   и  обязательное
условие - метка не должна начинаться так,   как  пишется
какая-либо команда,  иначе транслятор либо примет ее  за
команду,  либо  за  неправильно  написанную  команду  (и
выдаст сообщение об ошибке).
        Команда может состоять  из  одного  слова  (есть
такие команды), тогда вопросов нет, но чаще всего состо-
ит из двух - тогда она делится на  оператор  и  операнд,
разделяемые пробелом (пробелами).
        Комментарий может быть  каким  угодно  (хоть  на
японском языке),  транслятор не обращает на него  внима-
ния, комментарий нужен только для человека, пишущего или
изучающего программу.
        И последние правила.   Касаются  они  синтаксиса
строки.  Учтите,  что:
 - если транслятор встретит двоеточие,   он  посчитает
меткой
   все, находящееся слева от двоеточия;
 - если транслятор встречает знак ";" (точка с запятой),
   то дальше строку он не анализирует,  поскольку справа
   от ";" может находиться только комментарий;
 - в строке  может отсутствовать любая из частей (метка,
   команда, комментарий).
        Теперь поизучаем команды, а заодно и все осталь-
ное.  Закончим этот урок,  оттранслировав листинг данной
программы и запустим ее.
        Здесь будут рассмотрены только те команды,   что
используются  в  приведенной  выше  программе.   Команды
рассматриваются в алфавитном порядке.
        Уже упоминалось,  что команда может состоять  из
двух частей:  оператора и операнда.  Оператор - это соб-
ственно команда,  а операнд - ее параметры.  В  операнде
находится имя регистра или какое-либо число,  либо и то,
и другое, тогда число отделяется запятой от имени регис-
тра.
        Если в операнде содержится число, нужно пояснить
- какое это число (двоичное, десятичное, шестнадцатирич-
ное). Десятичное число не имеет никаких пометок.  Двоич-
ное должно оканчиваться буквой  B   (1001B,   например);
шестнадцатиричное буквой H (324H)  и если оно начинается
с цифр A, B, C, D, E и F, то перед такой цифрой ставится
ноль, например - 0F35H. 
        *** CALL ***
        Вызов подпрограммы по адресу, стоящему в операн-
де. В данной программе,  к примеру,  вызывается подпрог-
рамма по адресу 0005 (CALL 5).
        *** CPI ***
        Сравнивает  содержимое  Аккумулятора  с  числом,
стоящим в операнде.  Как происходит  сравнение?   Число,
указанное в операнде, вычитается из Аккумулятора.
        *** DB ***
        Команда не процессору,  а транслятору.  Она при-
казывает ему последовательно расположить в памяти числа,
следующие за этой командой. Числа должны отделяться друг
от друга запятой.  Если среди  них  встретятся  символы,
заключенные в апострофы (знак "'"),  в память посылаются
коды этих символов (это ведь тоже числа).
        *** DCR ***
        Уменьшает  на  единичку  регистр,   указанный  в
операнде.
        *** DCX ***
        Уменьшает  на  единичку  содержимое  регистровой
пары, имя которой указано операнде.
        *** END ***
        Сообщает транслятору,  что  программа  окончена,
даже если после этой команды есть куча других команд.
        *** INR ***
        Увеличивает на единичку содержимое регистра, имя
которого указано в операнде.
        *** INX ***
        Увеличивает на единичку  содержимое  регистровой
пары, имя которой указано в операнде.
        *** JM ***
        Передает управление  по  адресу,   указанному  в
операнде, если результат предыдущей операции был отрица-
тельным (Jump,  if  Minus  = прыгнуть,  если минус).   В
данном случае, предыдущая операция - DCR L. Результат ее
будет отрицательный, когда в регистре L  после ее выпол-
нения будет число от 80H  до FF.  Почему так -  об"ясним
чуть позже.
        *** JMP ***
        Эта команда просто передает управление по  адре-
су, указанному в операнде. Без всяких условий.
        *** JNZ ***
        Передает управление  по  адресу,   указанному  в
операнде.  Но только если результат предыдущей  операции
НЕНУЛЕВОЙ (JNZ = Jump, if Not Zero = прыгнуть,  если нет
нуля). Вопрос: за оператором JNZ нет адреса !?  Он есть.
Но здесь это не число,  а имя метки (M1).  Но метка ведь
находится по определенному адресу?  Значит М1  -  это  и
есть адрес.
        *** JZ ***
        То же, что предыдущая,  но управление передается
по НУЛЕВОМУ результату (Jump, if Zero).
        *** LXI ***
        Помещает в регистровую пару  или  регистр  стека
16-разрядное (т.е. двухбайтовое) число. Например:
LXI H,1002H - в пару HL помещается число 1002H, причем
 в регистре H будет число 10H, а в регистре L - число 02;
LXI  SP,100H  - здесь в регистр стека  помещается  число
 100H, другими словами,  стек устанавливается  по адресу
 100H.
        *** MOV ***
        Копирует число  из  одного  регистра  в  другой.
Имена обоих регистров в операнде,  причем слева от запя-
той указывается регистр, в который копируется содержимое
регистра, указанного после запятой.
        *** MVI ***
        Помещает в регистр (A, B, C, D, E,  H,  L)  один
байт. Имя регистра и байт находятся в операнде.
        Есть одна особенная разновидность этой  команды,
где мы встречаем еще один "регистр": MVI M,байт.  Регис-
тра M нет. M - это ячейка памяти, адрес которой находит-
ся в регистровой паре  HL.   И  такая  команда  означает
поместить байт в эту ячейку памяти.
        *** ORA ***
        Сложение содержимого Аккумулятора  с  содержимым
регистра, указанного в операнде.  Но это не арифметичес-
кое (арифм. тоже есть),  а ЛОГИЧЕСКОЕ сложение.  Сложить
ЛОГИЧЕСКИ два числа  -  значит  ПО  ОТДЕЛЬНОСТИ  сложить
каждый разряд БЕЗ ПЕРЕНОСОВ (т.е.  7+8 - пять пишем,   а
про один,  который "в уме",  просто забываем).  Это даже
проще, чем арифметическое сложение.  Правило очень прос-
тое - поскольку в двоичном числе складываются только 0 и
1,  то результат будет 1,  если хоть одно  из  слагаемых
будет 1.  Результат 0 только в  том  случае,   если  оба
слагаемых равны нулю. В данной программе (команда ORA A)
содержимое Аккумулятора логически складывается  с  самим
собой и результат 0 возможен только в том случае,   если
все разряды равны нулю, т.е.  если в Аккумуляторе содер-
жится число 0.
        *** ORG ***
        Команда не процессору, а транслятору.  Следующее
за ней число сообщает транслятору адрес начала программы
или ее фрагмента.  Ведь программа при выполнении  распо-
лагается в памяти по определенным адресам. Есть команды,
не привязанные ни к какому адресу памяти (арифметические
действия и т.п.), а есть такие, которые правильно выпол-
нятся только,  если будут "сидеть" в памяти там,  где им
положено "сидеть".
        В данном случае ORG  сообщает транслятору,   что
программа начинается с адреса 100.   Символ  "H"  (100H)
говорит,  что это 16-ричное число.  Если бы его не было,
тогда бы транслятор принял число 100 за десятичное.
        Учтите,  что большинство трансляторов,  если нет
команды ORG,  считает,  что начало программы  -  нулевой
адрес (0000).  Но программа с адреса 0 (не считая  игро-
вых)  - довольно редкое явление.  Обычно область пользо-
вательских программ начинается с адреса 100H.
        НО!  Если Вы работаете с  редактором-ассемблером
"EDASSM", Вам лучше сделать ORG 1800H. Дело в том, что с
адреса 100H  располагается сам редактор и запускать  там
программу не годится,   иначе  нужно  будет  каждый  раз
перезагружать редактор.
        *** OUT ***
        Посылает однобайтовое число во  внешнее  устрой-
ство. Число должно находиться в регистре A  (Аккумулято-
ре). Всякий вход (и выход) во внешнее устройство называ-
ется ПОРТОМ (как вход для кораблей).  Доступ к различным
устройствам  осуществляется  через  разные  порты   (для
каждого устройства свой порт).  Для программиста ПОРТ  -
это нечто вроде ячейки памяти  с  определенным  адресом.
Адрес этот указывается в операнде команды OUT.

        Теперь давайте разберем нашу программу.  Что  же
она делает?
        Во-первых,  мы  предупреждаем  транслятор,   что
программа будет начинаться с адреса 100H.  И,  предполо-
жим, программа уже стартовала. Что происходит?
        Сначала она очистит экран:
 MVI C,2
 MVI E,0CH
 CALL 5
        Это мы объясним ниже.
        Затем в Аккумулятор помещается ноль и этот  ноль
"летит" в порт с адресом 10H (OUT 10H), т.е.  в какое-то
внешнее устройство. А именно - в электронный диск. Таким
макаром мы его отключаем.  Зачем  это  нужно?   Если  он
подключен,  то он не даст работать с экраном,  поскольку
байты будут запузыриваться не в ВИДЕОпамять,  как  этого
мы хотим,  а в квазидиск (это ведь дополнительное ОЗУ  и
при включении оно как бы подменяет собой  основное  ОЗУ.
Другим способом  квазидиск  не  подключить  -  процессор
КР580ВМ80 может работать только с 64  Килобайтами).   Но
поскольку в этой программе мы  предполагаем  работать  с
экраном (с  ВИДЕОпамятью),   нужно  на  время  квазидиск
отключить.
        Теперь в регистровую пару HL помещаем число A07E
(LXI  H,0A07EH).  Это число нам нужно как  адрес  ячейки
памяти (это адрес в области ВИДЕОпамяти, а на экране это
левый край примерно посредине экрана). И теперь в ячейку
ВИДЕОпамяти по этому адресу мы посылаем  байт  FF   (MVI
M,0FFH). В двоичном виде FF выглядит как 1111 1111, т.е.
восемь единичек и,  следовательно,  на экране  загорится
полоска из восьми точек.
        Увеличим регистр H (INR  H),  теперь в нем будет
A1 (A0 --> A1),  а в паре HL  адрес A17E.  На экране это
полоска точек справа от предыдущей. Увеличиваем H дальше
и проверяем - не достигло ли его содержимое числа A8:

MOV A,H  ;в Аккумулятор копируется содержимое регистра H
CPI 0A8H ;и сравнивается с числом A8

        Если еще не достигло,  возвращаемся к  метке  M1
(JNZ  M1)  и опять посылаем в ВИДЕОпамять байт из восьми
единичек,  а на экран тем самым полоску из восьми точек.
В кусочке программы от M1  до  M2  мы  заполняем  ячейки
памяти A07E, A17E, A27E, ... A77E  кодами FF.  На экране
при этом полосками "выкладывается" горизонтальная линия.
        Итак, на ячейке с адресом A87E  команда JNZ  уже
не сработает  и  программа  пойдет  выполняться  дальше.
Теперь по этому адресу мы посылаем байт 80H.  Это байт с
одной единичкой (80H = 1000 0000) и, соответственно,  на
экране зажжется одна точка  рядом  с  последней  из  уже
"нарисованных".  Теперь увеличиваем содержимое  пары  HL
(INX H), в ней окажется адрес A87F (A87E  --> A87F).  На
экране это 8 точек НАД предыдущим "октетом". В цикле M2-
M3 в ВИДЕОпамять посылаются байты 80H - с адреса A87F по
A8D0,  при этом нужно увеличивать только регистр L.  Это
можно сделать как командой INX H, так и командой INR L.
 MVI M,80H
 INX H
 MOV A,L
 CPI 0D0H
 JNZ M2
        Теперь мы выстроили на экране полоски  друг  над
другом в количестве 80 штук.  И в каждой полоске  высве-
чена только одна (крайняя слева, так?) точка.  Это очень
похоже на вертикальную линию. Так оно и есть.
        Итак,  мы прорвались к метке M3,  и в паре HL  у
нас при этом адрес A8D0.
        Уменьшаем его на единицу (DCX H ; A8D0 --> A8CF)
и еще уменьшаем регистр H  (DCR  H  ;  A8CF  -->  A7CF).
Проницательный читатель уже заметил движение влево.  Да,
сейчас мы пойдем рисовать полоску влево,  до самого края
экрана. Попробуйте разобрать этот кусочек сами, он почти
копия кусочка M1-M2.
        Еще более проницательный читатель догадался  уже
и о том,  что программа вроде как рисует квадрат и,   по
идее, сейчас начнет рисовать его левую сторону.  Да,  об
этом и команда DCR  L  говорит (за  меткой  M4).   Пошла
заполняться память с адреса A0CF по ... какой? Очевидно,
чтобы замкнуть квадрат,  нужно  доехать  до  адреса,   с
которого начинали - A07E  (но последнюю точку пошлем  по
адресу A07F,  поскольку A07E  уже занят).  Почему  же  в
программе не так:
 M4:    DCR L
        MVI M,80H
        MOV A,L
        CPI 7FH
        JNZ M4

        Почему в листинге нечто другое?  Да потому,  что
идентичного результата можно достигнуть короче  (на  две
команды) и чтоб показать действие еще одной команды- JM.
        Итак,  мы заполняем память с адреса A0CF,  затем
A0CE, A0CD, ... A082, A081 ...  и все это дело контроли-
руем командой JM.  Где же прекратится этот цикл (M4-M5)?
Команда JM говорит:  прыгать к метке M4,  пока результат
предыдущей операции отрицателен.  Какой  операции.   MVI
M,80H? Нет, тут нет никакого действия над числами. Тогда
DCR L? Конечно. Содержимое регистра L уменьшается.  Чего
мы ждем?  Когда число в этом регистре станет положитель-
ным. Т.е. больше нуля? Вроде оно и так больше.  Так вот,
дело в  следующем.   В  двоичной  системе  отрицательным
числом считается такое,  у которого самый СТАРШИЙ разряд
перестал быть нулем,  т.е.  число с единицей  в  старшем
разряде. Таким образом, числа с 0 по 0111 1111 (0 по 7F)
- это положительные числа,  а с 1000 0000 по  1111  1111
(80H по FF) - отрицательные.  Вот теперь можно ответить,
чего ждет команда JM  - чтобы число в регистре  L  стало
меньше 80H, т.е. стало 7F. Итак, круг замкнулся (пардон,
замкнулся квадрат).
        Теперь пора включить квазидиск:
MVI A,23H
OUT 10H
        А теперь подождем,  пока не будет нажата  какая-
либо клавиша (фрагмент от метки M5 до команды JZ M5, его
мы тоже рассмотрим ниже).
        Наконец, кто-то нажал клавишу и программа двину-
лась дальше. В регистровую пару DE  помещается число ...
VIC  ??  Ну мы же уже выяснили,  что под названием меток
скрываются числа - это адрес в памяти той команды, перед
которой стоит метка. Итак в паре DE адрес места програм-
мы, которое выглядит VIC: DB ... и т.д. И опять выполня-
ется подпрограмма по адресу 5.  Но  теперь  она  выводит
надпись "УРА !".
        Что же это за подпрограмма по адресу 5,  которая
то очищает экран, то, наоборот,  замусоривает его дурац-
кими УРА,  то опрашивает клавиатуру?  Тем более,  что мы
уже доехали до конца - следом выполнится команда JMP  0,
т.е. управление будет передано на адрес 0,  а это значит
- либо монитору, либо операционке.

        Начнем издалека.
        Любая программа,  предназначенная для управления
ПЭВМ и внешними устройствами (к таким  программам  отно-
сится Монитор-Отладчик,  ДОС и некоторые другие),  имеет
набор подпрограмм,  которые может использовать  програм-
мист. Это сильно облегчает написание программ. Правильно
опросить клавиатуру, вывести сообщение на экран,  загру-
зить программу с магнитофона или дисковода и т.д. и т.п.
- все это используется очень часто,   все  это  делается
почти одинаково во всех программах и, следовательно, все
это логично организовать в подпрограммы  таким  образом,
чтобы доступ к ним был легким и простым.  Существует два
типа этой организации. Оба широко распространены.
        Первый - каждая подпрограмма имеет  свой  адрес,
по которому ее можно  вызвать.   Сколько  подпрограмм  -
столько адресов.  Вроде вполне нормальный способ.  Но  у
него есть махонький недостаток.   Этот  способ  требует,
чтобы адреса  вызова  п/п  всегда  находились  в  строго
определенном месте (обычно это адреса с F800  по  F833).
Но даже в "классической" программе - Монитор-Отладчик  -
подпрограммы могут находиться по этим адресам  (режим  1
запуска),  а могут и не находиться (режим 0).   И  такая
сильная привязка к определенному месту в  памяти  (более
того - в ВИДЕОпамяти) иногда сильно мешает.  Из-за этого
же часто возникает проблема программной  несовместимости
между различными ЭВМ. Этого недостатка нет в другом типе
вызова подпрограмм,  который мы употребили в нашей прог-
раммке.
        Суть его заключается в следующем.  Все  подпрог-
раммы вызываются по одному и тому же адресу.  Как  тогда
узнается, какая п/п требуется? Очень просто - указывает-
ся ее номер. Всегда в регистре C.  Иногда для выполнения
п/п требуются еще некоторые параметры - в  таком  случае
они указываются в регитрах E  и D.  Результат выполнения
п/п при необходимости находится в регистре A   после  ее
выполнения.  Как видите,  все очень просто.  Нужно доба-
вить,  что  при  этом  способе  подпрограммы  называются
функциями ДОС.
        В нашей программке используются  следующие  под-
программы (функции ДОС):
        1. П/п вывода символа на консоль (т.е. на экран).
Ее  номер  -  2  (при  ее  вызове  в  регистре C  должно
быть число 2). Код символа, выводимого на экран, помеща-
ется в регистр E. Если это обычный символ (буква, цифра,
знак препинания и пр.), то больше вопросов нет.  А какой
может еще быть символ? Ну, во-первых,  псевдографический
(нотка, стрелка, мордочка).  Тут тоже ничего особенного.
А вот, во-вторых - есть такие коды,  которые при посылке
их на консоль (на экран)  ничего не выводят,   а  делают
нечто другое. Перечислим главные из них по-порядку:

08 - сдвигает курсор влево на символ;   (код клавиши ВЛЕВО)
09 - курсор на 8 символов вправо;       (код клавиши ТАБ)
0A - сдвиг. курсор вниз на одну строку; (код клавиши ПС)
0C - очищает экран;                     (код ВЛЕВО-ВВЕРХ)
0D - помещает курсор в начало строки;   (код клавиши ВК)
18 - сдвигает курсор вправо на символ;  (код клавиши ВПРАВО)
19 - сдвигает курсор вверх на строку;   (код клавиши ВВЕРХ)
1A - сдвигает курсор вниз на строку;    (код клавиши ВНИЗ)
1B - указывает, что следом идет         (код клавиши АР2)
     несколько управляющих кодов.

        Проясним последнее подробнее.   1B   -  это  код
начала управляющей последовательности кодов (еще говорят
ESCAPEпоследовательность,  потому что на сурьезных маши-
нах нет клавиши АР2, а есть кл. ESCAPE, но это одно и то
же).  Если,  например,  за кодом 1B  стоит код 59H,  это
означает,  что задаются координаты курсора на экране,  а
именно:  третий код задает позицию курсора по вертикали,
а четвертый -  по  горизонтали  (номер  строки  и  номер
столбца экрана). Код, задающий номер позиции, образуется
просто - к этому номеру прибавляется число  20H   (32  в
десятичной системе) и код готов.  Скажем,  нужно вывести
символ "D" точно в центре экрана, т.е.  на 12 строке и в
40-м столбце (если на экране 80 символов). Нужно послать
на консоль код 1B, затем 59H, затем 44 (12 + 32),  затем
72 (40 + 32) и, наконец, 44H (это код символа "D").
        Но нас сейчас интересует код 0C. Это код очистки
экрана.
 MVI C,2       ;номер подпрограммы - 2
 MVI E,0CH      ;в регистре  E - код символа, выводимого
                 на консоль
 CALL  5        ;вызываем п/п номер 2,  т.е.  выводим на
                 консоль код 0C

        2. Подпрограмма ввода-вывода символа на консоль.
Ее номер - 6. Как видите, эта п/п может и вводить символ
с консоли (с клавиатуры)   и  выводить  на  консоль  (на
экран). Вас удивляет, что консолью обзывается то клавиа-
тура,  то экран?  Если быть точным,  то  консоль  -  это
средство взаимодействия оператора с ЭВМ.  А  они взаимо-
связаны через клавиатуру (оператор -> ЭВМ) и через экран
(ЭВМ -> оператор).
        Как показать,  что требуется - ввод  или  вывод?
Через регистр E.  Если его  содержимое  -  любое  число,
кроме FE  или FF,  оно считается кодом символа,  который
нужно вывести на экран.  Если в регистре E   код  FE   -
вызывается п/п опроса клавиатуры,  после ее окончания  в
Аккумуляторе будет либо 0,  либо FF.  Если 0 - значит во
время работы п/п ни одна клавиша не трогалась. Если FF -
какая-то трогалась. А можно узнать - какая? Да, но тогда
нужно вызвать эту п/п, имея в регистре E не FE, а FF.  В
этом случае при выходе из п/п в A будет опять же либо 0,
либо код нажатой клавиши.
        3.  Подпрограмма вывода строки символов на  кон-
соль. Ее номер - 9. Этой п/п нужно знать, где начинается
строка и где она кончается. Адрес начала строки указыва-
ется в регистровой паре DE.  А конец строки всегда обоз-
начается кодом 24H (36 десятичное).
        Что у нас за строка? Первые четыре символа - 1B,
59H,  28H,  25H  - говорят о том,  что  сообщение  будет
выводиться в 8-ю строку экрана (28H - 20H = 8),  начиная
с пятого столбца (25H - 20H  = 5).  Сообщение состоит из
пяти символов: УРА ! Затем идет пять кодов 0A.  Этот код
перемещает курсор вниз на строку.  Таким образом,  здесь
мы уводим курсор вниз на пять строк (чтобы  вывести  его
за пределы нарисованного квадрата). И, наконец,  код 24H
- признак конца строки.

        Вот и все.  Программа  разобрана  по  косточкам.
Теперь осталось полюбоваться на ее  работу.   Но  прежде
надо ее перевести в машинные коды с помощью транслятора.
Кто работает с редактором EDASSM, нажмите на клавишу СТР
- войдете в транслятор. Теперь нажмите на клавишу 1 (или
2,  или 3).  Программа будет оттранслирована.   Если  Вы
набрали ее текст без ошибок.  Кстати,   все  комментарии
(точка с запятой и все за ней до конца строки)  можно не
вводить.  Не забудьте,  что команда ORG  для Вас  должна
выглядеть: ORG  1800H.  Если это так,  то коды программы
уже лежат в нужном месте - с адреса 1800H  - и можно эту
программу запустить. Выходите в Монитор и командой G1800
запускаете ее.  Между прочим,  чтобы нервы у Вас были  в
порядке,  лучше текст программы сохранить  на  магнитной
ленте (в редакторе есть соответствующая команда  -  про-
читайте его описание).
        Кто работает с дисководом, может оттранслировать
программу  такими   Ассемблерами:    ASSM.COM,  MAC.COM,
ASM.COM.   У этих трансляторов синтаксис одинаков:
имя транслятора, затем имя исходника без расширения.  Но
у исходника расширение обязательно должно быть,  и  обя-
зательно - ASM. Например, пойдет такое: FIRST.ASM, тогда
напустить на него транслятор можно так:
 ASSM FIRST
        Лучше всего  использовать  ASSM.COM.   Он  сразу
создаст исполняемый файл  FIRST.COM.   Если  у  Вас  нет
ASSM.COM, используйте MAC или ASM, но файла FIRST.COM не
получите.  Зато получите файл FIRST.HEX.  Из него  можно
сделать FIRST.COM программой LOAD.COM:
 LOAD FIRST,
либо отладчиком SID:
 SID FIRST.HEX - это Вы загрузились в SID  и он даже уже
преобразовал FIRST.HEX в машинные коды с адреса 100H.  И
даже уже можно запустить программу  командой  G100.   Но
лучше сначала сохранить ее на диске:
 IFIRST.COM - сохранять будем под именем FIRST.COM
 W100,1FF - сохраняем с адреса 100H по 1FF
Теперь нажмите клавишу F4 и выйдете в  DOS.   Запускайте
программу и любуйтесь результатом.

        Первый урок закончен.  В следующем  мы  разберем
самые главные команды Ассемблера и все основные подпрог-
раммы монитора (функции ДОС).
        Кроме того,  в следующем номере  начинаем  "цикл
статей" для уже  имеющих  опыт  программирования.   Речь
пойдет о работе с дисками:  как прочитать файл с  диска,
как записать его на диск, удалить, скопировать, переиме-
новать и т.д.
        ------------------------------------------
        Друзья.  Мы приносим Вам извинения за не  совсем
удачный (может, и совсем неудачный) первый выпуск нашего
журнала. Все дело, как всегда, в спешке.  Журнал в ката-
логи вставили, а подготовить не успели.  Пришлось наспех
заканчивать его.  Потому и вышел этот  выпуск  не  шибко
интересный.
        Содержание следующего номера примерно такое:

        1. Периферия. Как подключить к "Вектору" монитор
"Электроника 6105",  чтобы изображение было контрастным,
не искажалось и кадры не плыли. А также,  как подключить
монитор, требующий раздельной подачи строчных и кадровых
синхроимпульсов.
        Как соорудить  хороший  звуковой  выход,   чтобы
избавиться от магнитофона.

        2.  Программирование на Ассемблере.  Две  части:
для начинающих и для имеющих опыт программирования.

        3.  Описание работы с  некоторыми  системными  и
прикладными программами.

        4. "Черный список" игр. Игры,  не представляющие
никакого интереса. Ведь жалко тратить деньги на халтуру.

        5. Из опыта работы с дисководом. Разные хитрости
и тонкости.

        6. Какие бывают текстовые файлы и как бороться с
некоторыми "некрасивыми" или "странными" текстами. 

░■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■▒           
∙С удовольствием ответим на все Ваши вопросы, связанные∙
∙с программированием, подключением, распечаткой  и т.п.∙
∙Поместим Ваше об"явление  в  журнал  (некоммерческое -∙
∙бесплатно, коммерческое - за небольшую плату).        ∙
Ї■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■▓

        Наш адрес: 644100, Омск, а/я 3812.