		     СИСТЕМНЫЕ ЧАСЫ РЕАЛЬНОГО ВРЕМЕНИ

      Часы реального времени собраны на	специализированной  микросхеме
КР512ВИ1. Эта микросхема имеет режим календаря,	часов и	будильника,  а
также ОЗУ общего назначения 50 байт.
      Питание часов  может  осуществляться  как	 от  ПЭВМ,  так	 и  от
внешнего источника питания напряжением 3-5 вольт.  Схема,  по  которой
собраны	 часы,	предполагает  возможность   одновременного   включения
питания	от ПЭВМ	и от внешнего источника. Если  питание	осуществляется
только от ПЭВМ,	 то  при  включении  машины  нужно  будет  каждый  раз
устанавливать показания	часов. Если питание  подается  и  от  внешнего
источника,  то	во  время  работы  ПЭВМ	  батарейка   практически   не
расходуется, а когда ПЭВМ  отключена,  расходуется  очень  экономично,
поскольку м/с КР512ВИ1 работает	в этом	случае	в  режиме  ожидания  -
самом эеономичном режиме (потребляемый ток-50мкА). В качестве  батареи
подойдет любой источник	питания.
      Лучше всего спрятать часы	внутрь ПЭВМ -  параллельно  системному
разъему. Подключение очень  простое.  Провода  выведены	 так,  что  их
можно припаять к контактам системного разъема четко параллельно.
   А именно:
   первые десять проводов к 1-10 контактам, следующие восемь к
   25-32 и остальные 3 - к 35,37 и") контактам соответственно.
   Как	работают  эти  часы  ?
      При подаче питания  на  них  они,	 естественно,  устанавливаются
случайным образом.  Значит,первое,  что	 нужно	сделать	 -  установить
текущее	показание часов. После этого они уже сами  будут  все  делать,
пока им	подается  питание.  Задача  компьютера	только	в  том,	 чтобы
считывать показания часов и выводить их	на экран. Поэтому  разберемся,
как устроены часы в программном	отношении.
      Для программиста часы - это 64 ячейки памяти, имеющие адреса  от
00 до 3FH. И два порта:
   20H - сюда записывается  адрес  ячейки  памяти часов;
   21H - данные	этой ячейки.
      В	общем виде картина такая - чтобы записать информацию  в	 часы,
нужно в	порт адреса 20H	послать	адрес  ячейки,	в  которую  Вы	хотите
записать данные, затем в порт  данных  21H  послать  данные  для  этой
ячейки.	Чтобы считать информацию какой-либо ячейки часов,  посылаем  в
порт адреса ее адрес, а	из порта данных	считываем данные.







	  Например:

     MVI     A,4    ;  04- адрес ячейки, хранящей показания часов
     OUT     20H    ;  сообщаем	м/с, что будем работать	с этой ячейкой
     IN	     21H    ;  беремданные из нее
     CALL    0F815H ;  выводим на экран
     MVI     A,2    ;  02 - адрес ячейки, хранящей показания минут
     OUT     20H    ;  сообщаем...
     IN	     21H    ;  берем данные ( минуты)
     CALL    0F815H ;  выводим на экран
     JMP     0	    ;  возвращаемся в монитор

     MVI A,2	    ;  02 - ячейка минут
     OUT 20H	    ;
     MVI A,33H	    ;  новые показания
     OUT 21H	    ;  записываем в эту	ячейку

      Как  видите,все  довольно	  просто.   Правда,   чтобы   записать
информацию в часы,  нужно  чуток  подругому  начать.  Как  это	делать
разберем после блока справочной	информации.

      Распределение памяти микросхемы КР512ВИ1
	┌────────────────────────────────────────────────┐
	│	 Адрес		     Данные		 │
	├────────────────────────────────────────────────┤
	│	  00H		    секунды		 │
	│	  01H	       секунды (будильник)	 │
	│	  02H		    минуты		 │
	│	  03H	       минуты( будильник)	 │
	│	  04H		    часы		 │
	│	  05H		 часы(будильник)	 │
	│	  06H		    день недели		 │
	│	  07H		  день месяца		 │
	│	  08H		     месяц		 │
	│	  09H		      год		 │
	├────────────────────────────────────────────────┤
	│	  0AH		     регистр  A		 │
	│	  0BH		     регистр  B		 │
	│	  0CH		     регистр  C		 │
	│	  0DH		     регистр  D		 │
	├────────────────────────────────────────────────┤
	│     с	0EH  по	3FH	 ОЗУ общего назначения	 │
	└────────────────────────────────────────────────┘


      Возможны запись и	чтение любой ячейки часов, за исключением:
  - по адресам 0CH,0DH-	только чтение
  - старшие разряды по адресам 00 и 0AH	можно только считывать.
      Как    обращаться	    к	  ячейкам     по     адресам	 00-09
(календарь,часы,будильник) рассмотрено выше. Больше  никаких  секретов
нет. Точно также записываются  и  считываются  данные  из  ОЗУ	общего
назначения  (0EH-3FH).	Остаются  регистры   A,B,C,D.	Эти   регистры
предназначены  для  управления	работой	 микросхемы   и	  анализа   ее
состояния.

			Регистр	A

    Формат байта   D7	D6 D5 D4   D3 D2 D1 D0
			─────────  ───────────
		   UIP	   DV	       RS

  UIP -	единица	в этом	разряде	 означает,что  прпоисходит  обновление
информации  о  времени.	 В  этот  момент  считывание  информации  даст
неопределенный результат поэтому корректное  обращение	выглядит  так:

NOYET: MVI	  A,0AH	; обращаемся
       OUT	  20H	;  к регистру А
       IN	  21H	;  считываем из	него байт
       RAL		;  выделяем старший разряд UIP
       JC	  NOYET	;  если	он не нулевой -	ждем

  DV -	часы  могут  работпть  с  разными  часовыми  кварцами.	Но  по
нескольким  парметрам  (стоимость,доступность,	 эконмичность)	 лучше
всего кварц на 32768 Гц	Он кодируется как 010.
  RS  -	 устанавливает	частоту	 сигнала  на  выходе  SQW   и	период
повторения  периодических  прерыаний  с	 выхода	  IRQ.	 IRQ=1000/SQW.
Напрмер, частота на выходе SQW равна 256 Гц, период  прерываний	 равен
1000/256=3,9 мс	(милисекунды).

      D3 D2 D1 D0	 частота,Гц	   период,мс

       0  0  1	1	   8192		      0.122
       0  1  0	0	   4096		      0.244
       0  1  0	1	   2048		      0.488
       ...............................................

       1  1  1	0	    4		      250
       1  1  1	1	    2		      500


      Выход SQW- это 23	вывод м/с ВИ1.	Чаще  всего  используется  для
подачи сигнала от будильника. Выход IRQ	- 19 вывод  м/с.  Используется
как  сигнал  выдачи  прерывания	 либо  по  постоянной	частоте	  (как
определено  выше),  либо  по  окончании	 цикла	обновления,  либо   от
будильника.

			РЕГИСТР	В

   Формат байта	 D0    D0    D0	   D0	 D0	D0   D0	     D0
		 SET   PIE   AIE   UIE	 SQWE	DM   24/12   0

  SET- единица в этом разряде запрещает	обновление, давая  возможность
записать  в  регистры  времени	 начальные   значения.	 После	 этого
необходимо записать 0 в	этот разряд - включить цикл обновления.
  PIE- зазрешение  прерываний  с  периодом,  задаваемым	 разрядами  RS
регистра A. Может быть сброшен сигналом	RESET. Подать сигнал  RESET  -
это значит подать 0 на 18 вывод	м/сх ВИ1.
  AIE-	разрешение  прерываний	от  будильника.	 Может	быть   сброшен
сигналом RESET.
  UIE- разрешение прерываний  по  окончании  цикла  обновления.	 Может
быть сброшен сигналом RESET.  SQWE  -  разрешение  выдачи  сигнала  на
выход SQW. Может быть сборшен сигналом RESET.
  DM- единица в	этом разряде означае, что  данные  о  времени  и  дате
представлены в двоичном	виде, 0- в двоично-десятичном. Значение	 этого
разряда	нельзя изменять	без  повторной	записи	начальных  значений  в
ячейки времени и календаря.
  24/12	- устанавливает	24 часовой  (1)	 или  12  часовой  (0)	режим
счета времени. В 12 часовом  режиме  время  после  полудня  отмечается
единицей в старшем разряде регистра часов (адрес 04).

      Этой   информации	  уже	достаточно,   чтобы   инициализировать
микросхему. Для	этого  в  регистр  А  нужно  записать  байт  0010ХХХХ,
например, 26Н. Здесь важно дать	понять	часам,	что  к	ним  подключен
кварц 32768 Гц,	а не какой-либо	другой.	 Затем	(посколько  следом  мы
будем записывать данные	в регистр времени), дать понять	 м/схеме,  что
данные представлены  в	двочно-десятичном  виде	 и  работать  нужно  в
24-часовом режиме. Остальное пока безразлично.
      Вот  вполне  рабочий вариант пуска часов:







      MVI    A,0AH
      OUT    20H
      MVI    A,26H
      OUT    21H
      MVI    A,0BH
      OUT    20H
      MVI    A,82H
      OUT    21H
      ...............
      программируем регистры времени
      MVI    A,0BH
      OUT    20H
      MVI    A,02H   ; сбрасываем разряд SET в 0,
      OUT    21H     ; чтобы часы затикали

   Все,	часы заработали, можно ими пользоваться.

			РЕГИСТР	 С

   Формат байта:   D0	 D0  D0	D0  D0	D0  D0	D0
		   IRQF	 PF  AF	UF  0	0   0	0

  IRQF-	флаг запроса прерываний. Устанавливается в "1" при  выполнении
условия: PFxPIE	+ AFxAIE +  UFxUIE  =  1.  Одновременно	 с  установкой
IRQF=1	на  контакте  IRQ   устанавливается   низкий   уровень.	  Флаг
сбрасывается  после  чтения  регистра  С  или  сигналом	  RESET.
  PF-  устанавливается	в  1  фронтом  сигнала	на  входе  внутреннего
делителя частоты, выбранном в соответствии с разрядами RS регистра  А.
Флаг сбрасывается только после чтения регистра С или сигналом RESET.
  AF- устанавливается в	1 при совпадении текущего времени с  временем,
указанным в регистрах будильника; сбрасывается после  чтения  регистра
С или сигнала RESET.
  UF- устанавливается в	1 после	 окончания  каждого  цикла  обноления;
сбрасывается после чтения регистра С или сигналом RESET.


			РЕГИСТР	 D

	Здесь работает лишь один старший  разряд,  в  остальных	 всегда
нули. В	старшем	разряде	 устанавливается  0,  если  было  любое,  даже
кратковременное	    отключение	   питания     микросхемы.     Единица
устанавливается	только считывание регистра D. Таким образом,  если  Вы
усекли 0 в старшем разряде регистра D- знайте, что информация в	 часах
наверняка неверная, так	как их отключали.

		 хххххххх
      Итак, почти вся необходимая  информация  у  Вас  есть.  Остались
мелочи.
      Дни недели кодируются так: 1-понедельник;2-вторник  и  т.д.  Год
задается двумя младшими	цифрами, например,  1994  г  записывается  как
94.  Все  значения  должны  заноситься	в  формате,  установленном   в
соответсвующих разрядах	регистра В.  Например,	десятичному  числу  11
соответствует  00001011	 (0BH)	в  двоичном   и	  00010001   (11H)   в
двочно-десятичном формате.
      Каждую секунду м/схема КР512ВИ1 обновляет	 информацию  о	вемени
(первый	раз обновление произойдет через	 0.5  сек  после  записи  0  в
старший	разряд регистра	B).
      Внутренняя логика	микросхемы автоматически учитывает  количество
дней в месяце, различает високосные годы.  Однако  программист	обязан
правильно задать начальные значения. Это относится не только  к	 дате,
но и к другим величинам. Нельзя, например, в ячейку  минут  записывать
число, больше 59.
      Одновременно с обновлением информации о времени  заданное	 время
срабатывания будильника	сравнивается с текущим.	Следует	иметь в	 виду,
что если в любую из ячеек будильника записан код,  содержащий  единицы
в двух старших разрядах	(0С0H...0FFH)  она  переходит  в  безразличное
состояние  и  не  учитывается  при  сравнении  с   текущим   временем.
Например, если записать	код безразличного состояния по адресу 05H,  то
будильник будет	срабатывать в заданную минуту и	секунду	каждого	часа.
      После  считывания	 регистра  С  все  его	разряды	 автоматически
сбрасываются в ноль. Единицы в этих разрядах  появляются  вновь	 после
очередного наступления соответствующих	событий	 и  будут  сохраняться
только до следующего считывания. Так что если необходимо  неоднократно
анализировать состояние	различных разрядов этого  регистра,  то	 после
считывания нужно сохранить  его	 копию	и  затем  проверять  отдельные
разряды	копии.
      Рассмотрим  схему	 подачи	 звукового  сигнала  при  срабатывании
будильника. Для	того чтобы эта схема срабатывала, в регистр  В	должны
быть записаны единицы в	разряде	AIE и SQWE и  нули  в  разряды	UIE  и
PIE.  Желаемая	высота	звука  (сигнал	SQW)  задается	разрядами   RS
регистра A. При	совпадении заданного времени  срабатывания  будильника
с текущим временем на выходе  IRQ  устанавливается  низкий  логический
уровень, разрешающий прохождение сигнала  со  входа  элемента  ИЛИ-НЕ,
соединенного с	выводом	 SQW  на  его  выход.  Одновременно  начинется
разрядка конденсатора С1 через резистор	R2. Как	только	напряжение  на
входе RESET достигает низкого логическеого  уровня,  восстанавливается
высокий	 уровень  на  выходе  IRQ  и  звуковой	сигнал	 прекращается.
Длительность сигнала определяется постоянной времени цепочки  R2C1.  В
любой момент его можно прекратить, нажав кнопку	SB1.
